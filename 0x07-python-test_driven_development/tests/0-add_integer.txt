# 0-add_integer.txt

0-add_integer.py is a python module that defines an integer addition function. ``add_integer(a, b=98)``
b is an optional argument an defaults to 98 if not passed
a and b can either be a float or an integer
float arguments are converted to integer before adding

======
USAGE:
======

``add_integer(a, [b])``


>>> add_integer = __import__('0-add_integer').add_integer

Two positive integers
>>> add_integer(4, 7)
11

Two negative integers
>>> add_integer(-3, -6)
-9

Negative integer and a positive integer
>>> add_integer(-3, 12)
9

Positive integer and a negative integer
>>> add_integer(16, -2)
14

Zero addition
>>> add_integer(0, 0)
0

Zero and a positive integer
>>> add_integer(0, 12)
12

Positive integer and zero
>>> add_integer(11, 0)
11

Positive float and a negative float
>>> add_integer(2.2, -2.4)
0

Two positive floats
>>> add_integer(2.0, 6.4)
8

Only one parameter
>>> add_integer(23)
121

A string and an integer
>>> add_integer("add", 14)
Traceback (most recent call last):
TypeError: a must be an integer

Two strings
>>> add_integer("add", "mul")
Traceback (most recent call last):
TypeError: a must be an integer

A negative integer and a string
>>> add_integer(-18, "mul")
Traceback (most recent call last):
TypeError: b must be an integer

No parameter passed
>>> add_integer()
Traceback (most recent call last):
TypeError: add_integer() missing 1 required positional argument: 'a'

None as only parameter
>>> add_integer(None)
Traceback (most recent call last):
TypeError: a must be an integer

A positive integer and None
>>> add_integer(2, None)
Traceback (most recent call last):
TypeError: b must be an integer

A positive integer and infinity
>>> add_integer(2, float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

A positivve integer and nan
>>> add_integer(2, float('nan'))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer
